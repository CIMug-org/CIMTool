#
# Internally, CIMTool supports a variety of different types of builders that can generate profile artifacts 
# for a profile in the project.  Examples include XSD schemas, JPA Java source code, RDBMS DDL scripts, 
# and RDFS files to name a few.  One "category" of output type supported by CIMTool are artifacts generated 
# as a result of an XSLT transform. Currently, the following three general "types" are supported:
#
#		1. JSON
#		2. TEXT
#		3. XSD
#
# The 'builders.conf' configuration file allows for custom XSLT transforms to be created by end-users and 
# added via configuration.  Within the builders section there should be a corresponding entry per XSLT 
# transform builder. The actual XSL file must be located within the /custom-xslt-builders directory.
# 
# There is a strict naming convention that must be followed for the key used for an XSLT configuration entry.
# The key must exactly match the name of the .xsl file in the /custom-xslt-builders folder but must not include 
# the extension.  It should be noted that periods (.) are not allowed within a key name of an XSLT configuration 
# entry. The following provides an example for a hypothetical XSLT transfrom named "csharp-poco-generation.xsl" 
# for a builder to generate a "plain old C# objects" (POCOs) artifact from a profile:
#
#	java-pojo-generation {
#		type = "TEXT"
#		ext = "cs"
#		display = "generating C# POCOs"
#	}
#
# The configuration style expressed below is in HOCON (Human-Optimized Config Object Notation). For further   
# information see: https://github.com/lightbend/config/blob/master/HOCON.md
#
# Configuration entries: 
#   "type" - (required) one of the following enumerated values:  JSON, TEXT, XSD
#   "ext" - (required) the extension of the file that is generated by the builder.
#   "display" - (optional) additional text to be displayed in the "Profile Summary" tab for builders 
#      within CIMTool.  When not specified the extension alone will be what is displayed.
# 
builders {

#	faker-extensions-json-draft-07 {
#		type = "JSON"
#		ext = "draft-07.faker.schema.json"
#		display = "faker-json-schema-draft-07"
#	}
	
#	faker-extensions-json-draft-07-lite {
#		type = "JSON"
#		ext = "draft-07.faker.lite.schema.json"
#		display = "faker-json-schema-draft-07-lite"
#	}
	
	schema-json-draft-07 {
		type = "JSON"
		ext = "draft-07.schema.json"
		display = "json-schema-draft-07"
	}
	
	schema-json-draft-07-lite {
		type = "JSON"
		ext = "draft-07.lite.schema.json"
		display = "json-schema-draft-07-lite"
	}
	
}
	
