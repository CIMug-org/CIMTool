###  Rules for Validating and Repairing a Profile Ontology.  ### 
#
# functors used here are defined in: 
# au.com.langdale.inference.StandardFunctors and
# au.com.langdale.inference.RepairLibrary

[
	(?PClass rdf:type owl:Class)
	uri(?PClass)						# for each named class ?PClass 
->
	[
		axiom(?PClass rdf:type ?Species)			# if ?PClass is defined in the schema as a ?Species
	->
		problem(?Ref ?PClass "is defined in both profile and schema")
	]||
	[->
		checkClass(?PClass)					# else check ?PClass
	]
]

[
	checkClass(?PClass)
->
	[
		(?PClass rdfs:subClassOf ?SClass)
		notSame(?PClass ?SClass)
		uri(?SClass)
		axiom(?SClass rdf:type owl:Class)		# for each superclass of ?PClass defined in the schema ?SClass
	->
		checkStructure(?PClass ?SClass)
	]||
	[
		(?PClass rdfs:subClassOf ?SClass)
		notSame(?PClass ?SClass)
		uri(?SClass)
		not(?SClass rdf:type *)				# else for each super class of ?PClass not defined in the profile ?SClass
	->
		problem(?Ref ?PClass "is based on an undefined class" ?SClass)
		remove(?Ref ?PClass)
		[ similar(owl:Class ?SClass ?Guess) -> rename(?Ref ?SClass ?Guess) ]
	]||							
	[
		notSame(?PClass <http://langdale.com.au/2005/Message#Message>)
		notSame(?PClass <http://www.w3.org/2002/07/owl#Thing>)
	->							
											# else ?PClass has only localy defined superclasses or none
		problem(?Ref ?PClass "is not defined as a profile")
		remove(?Ref ?PClass)
		[ similar(owl:Class ?PClass ?Guess) -> setProperty(?Ref ?PClass rdfs:subClassOf ?Guess) ]
	]
]

[
	checkStructure(?PClass ?SClass)
->
	[
		(?PClass rdfs:subClassOf ?XClass)
		notSame(?PClass ?XClass)
		notSame(?SClass ?XClass)
		uri(?XClass)
		axiom(?XClass rdf:type owl:Class)		# for each superclass of ?PClass defined in the schema ?SClass
	->
		problem(?Ref ?PClass "is a profile of more than one schema class" )
		remove(?Ref ?PClass rdfs:subClassOf ?XClass)
	]||
	[
		(?PClass rdfs:subClassOf ?PBase)
		notSame(?PClass ?PBase)				# for each superclass ?PBase
	->
		[
			uri(?PBase)
			(?PBase rdf:type owl:Class)			# if ?PBase is a named class defined in the profile
			(?PBase rdfs:subClassOf ?SBase)
			notSame(?PBase ?SBase)
			uri(?SBase)
			axiom(?SBase rdf:type owl:Class)			# for each superclass of ?PBase defined in the schema ?SBase
		->
			[
				axiom(?SClass rdfs:subClassOf ?SBase)			# if ?SClass inherits ?SBase in the schema
			->
			]||
			[	
				same(?Class ?SBase)					# or exactly agrees
			->
			] ||
			[->
				problem(?Ref ?PClass "is not a suitable subclass of declared base class" ?PBase "because" ?SClass "is not a subclass of" ?SBase)
				remove(?Ref ?PClass rdfs:subClassOf ?PBase) 
			]
		]||
		[
			(?PBase rdf:type owl:Restriction)		# if ?PBase is a restriction
		->
			checkRestrict(?PBase ?PClass ?SClass)			# check the restriction
		]
	]
]

[
	checkRestrict(?Restrict ?PDomain ?SDomain)
->
	[
		uri(?Restrict)
	->
		problem(?Ref  ?PDomain "has a named restriction which should be anonymous" ?Restrict)
	]
			
	[
		(?Restrict owl:onProperty ?Prop)		
		uri(?Prop)				# for each restricted property ?Prop of ?PDomain
	->
	
		[
			axiom(?Prop rdfs:domain ?Domain)	# for a domain of ?Prop defined as ?Domain we are looking for a subclass ?SDomain
		->
			[						
				axiom(?SDomain rdfs:subClassOf ?Domain)	# if ?Domain is compatible with ?SDomain
			->
			]||
			[	same(?Domain ?SDomain)			# or exactly agrees
			->
			]||
			[
				axiom(?Domain rdfs:subClassOf ?SDomain) # ?Domain is partially compatible with ?SDomain
			->
				checkOptional(?Prop ?PDomain ?SDomain)
			]||
			[->
				problem(?Ref ?Prop  "does not belong to this class" ?PDomain "based on" ?SDomain)
				remove(?Ref ?Restrict)
			]
		]
		
		[
			(?Restrict owl:allValuesFrom ?PRange)	# for each range ?PRange
		->
			[	
				(?Prop rdf:type *)			# if property ?Prop is defined in the profile
			->
				problem(?Ref  ?Prop "is defined directly in the profile instead of the CIM")
				remove(?Ref ?Prop rdf:type)
			]
		
			[	
				axiom(?Prop rdf:type owl:ObjectProperty) # if ?Prop is an object property defined in the schema
			->
				[
					(?PRange owl:unionOf ?Union) 		# if ?PRange is a union (a new style of profile definition)
				->
					checkUnion(?Union ?Prop ?Restrict)	
				]||
				[						# else ?PRange is not a union (it is an old style profile definition)
					(?PRange rdfs:subClassOf ?PClass)
					notSame( ?PRange ?PClass)
					uri(?PClass)
					(?PClass rdf:type owl:Class)		# if ?PRange defined in old style as ?PClass
					
				->
					checkRange(?PClass ?Prop ?Restrict)	
				]||
				[->						# if ?PRange defined in old style directly
					checkRange(?PRange ?Prop ?Restrict)
				]
			] ||
			[	
				axiom(?Prop rdf:type owl:DatatypeProperty) 
									# if ?Prop is a datatype property in the schema
			->
				[
				    (?PRange rdf:type rdfs:Datatype)
				->
				    # ?Prop has correct type of range
				]||
				[->
				    problem(?Ref ?Prop "is restricted to a range not declared as a datatype")
				    remove(?Ref ?Restrict)
				]
				[
					(?PRange rdfs:subClassOf ?SType)	
					notSame(?PRange ?SType)			# for each superclass of the ?Prop range ?SType
				->
					[
						uri(?SType)
						axiom(?SType rdf:type rdfs:Datatype)	# if ?SType is a datatype
					->
												# ?Prop is OK
					]||
					[
						uri(?SType)
					->
						problem(?Ref ?Prop "is restricted to a range derived from a class not a datatype" ?SType)
						[
						    anon(?PRange)
						->
						    remove(?Ref ?PRange rdfs:subClassOf ?SType)
						]
						remove(?Ref ?Restrict)
					]||
					[->
						problem(?Ref ?Prop "has an ill-formed restriction")
						remove(?Ref ?Restrict)
					]
				]
			] ||
			[ 						# if ?Prop is undefined
			->
				problem(?Ref ?Prop "is not defined in the schema")
				remove(?Ref ?Restrict)
				[ similar(owl:ObjectProperty ?Prop ?Guess) -> rename(?Ref ?Prop ?Guess) ]
				[ similar(owl:DatatypeProperty ?Prop ?Guess) -> rename(?Ref ?Prop ?Guess) ]
			]
		] ||
		[
			(?Restrict owl:minCardinality ?V)
		->
			checkCard(?Prop ?Restrict ?V)
		] ||
		[
			(?Restrict owl:maxCardinality ?V)
		->
			checkCard(?Prop ?Restrict ?V)
		] ||
		[
			(?Restrict owl:cardinality ?V)
		->
			checkCard(?Prop ?Restrict ?V)
		] ||
		[ -> 
			problem(?Ref ?Prop "has an ill-formed restriction") 
			remove(?Ref ?Restrict)
		]	
	] ||
	[ -> 
		problem(?Ref ?Prop "has an ill-formed restriction")
		remove(?Ref ?Restrict)
	]
]

[
	checkUnion(?Union ?Prop ?Restrict)
->
	[
		(?Union rdf:first ?PClass)
	->
		checkRange(?PClass ?Prop ?Restrict)
	]
	[
		(?Union rdf:rest ?Tail)
	->
		checkUnion(?Tail ?Prop ?Restrict)
	] 
]

[
	checkRange(?PClass ?Prop ?Restrict)
->
	[
		(?PClass rdf:type owl:Class)		# if ?PClass is defined as a class
	->
		[
			axiom(?Prop rdfs:range ?SRange)		# for some sample range of ?Prop defined in the schema ?SRange
		->
			[
				(?PClass rdfs:subClassOf ?SClass)
				notSame(?PClass ?SClass)
				uri(?SClass)
				axiom(?SClass rdf:type owl:Class)	# for each superclass of ?PClass defined in the schema ?SClass
			->
				[
					axiom(?SClass rdfs:subClassOf ?SRange)	# if ?SClass is compatible with the range of ?Prop
				-> 
					[
					    anon(?PClass)
					->
					    checkStructure(?PClass ?SClass)
					]
				]||
				[
					same(?SClass ?SRange)			# or exactly agrees
				->
					[
					    anon(?PClass)
					->
					    checkStructure(?PClass ?SClass)
					]
				]||
				[->
					problem(?Ref ?Prop "is restricted to a range derived from incompatable class" ?SClass "should be" ?SRange)
					[
					    anon(?PClass)
					->
					    remove(?Ref ?PClass rdfs:subClassOf ?SClass)	# propose remove ?SClass as a base class
					]||
					[
					->
					    remove(?Ref ?Restrict)				# propose remove restriction ?Restrict
					]
				]
			]||
			[
			    anon(?PClass)
			->
			    [
				    (?PClass rdfs:subClassOf ?SClass)
				    notSame(?PClass ?SClass)
				    uri(?SClass) 
				    not(?SClass rdf:type *)					# if ?PClass is a profile of an unknown class ?SClass
			    ->
				    [
					    notSame(?SClass <http://langdale.com.au/2005/Message#Reference>)
				    ->
					    problem(?Ref ?Prop "is restricted to a range derived from an undefined class" ?SClass)
					    remove(?Ref ?PClass rdfs:subClassOf ?SClass)		# propose remove ?SClass as a base class
					    [ 
						    similar(owl:Class ?SClass ?Guess)		
						    axiom(?Guess rdfs:subClassOf ?SRange)		# if ?Guess is similar to ?SClass ans compatible with ?SRange
					    -> 
						    rename(?Ref ?SClass ?Guess) 			# propose replace ?SClass with ?Guess
					    ]
				    ]
			    ]||
			    [->
				    # range of ?Prop is not restricted to any subclass of ?SRange
				    checkStructure(?PClass ?SRange)
			    ]
			]
		]||
		[->
			# ?Prop does not have a defined range in the schema
			checkClass(?PClass)
		]
	]||
	[->
		problem(?Ref ?Prop "is restricted to a range not declared as a class")
		remove(?Ref ?Restrict)				# propose remove restriction ?Restrict
	]
]

[
	checkOptional(?Prop ?PDomain ?SDomain)
->
	[
		(?PDomain rdfs:subClassOf ?Restrict)
		(?Restrict rdf:type owl:Restriction)
	->
		[
			(?Restrict owl:cardinality ?V)
		->
			problem(?Ref ?Prop "may not be mandatory in this class" ?PDomain "based on" ?SDomain)
			remove(?Ref, ?Restrict)
		]||
		[
			(?Restrict owl:minCardinality ?V)
			greater(?V 0)
		->
			problem(?Ref ?Prop "may not be mandatory in this class" ?PDomain "based on" ?SDomain)
			remove(?Ref, ?Restrict)
		]
	]
]

[
	checkCard(?Prop ?Restrict ?V)
->
	[
	    axiom(?Prop rdf:type owl:FunctionalProperty)
	    greater( ?V, 1)
	->
	    problem(?Ref ?Prop "is restricted to cardinality greater than 1" ?V )
	    remove(?Ref ?Restrict)
	]
]

