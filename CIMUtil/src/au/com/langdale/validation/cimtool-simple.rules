@prefix scaf: <http://langdale.com.au/2007/rule-scafold#>.
@prefix uml: <http://langdale.com.au/2005/UML#>.
@prefix split: <http://langdale.com.au/2007/SplitModel#> .

# ---- fundamentals ----
	
[-> (owl:Property rdf:type owl:Class)]
	
[-> (owl:Class rdf:type owl:Class)]

[-> (scaf:BaseClass rdf:type owl:Class)]

[-> (scaf:BaseClass rdfs:subClassOf owl:Class)]

[-> (rdf:type rdf:type owl:ObjectProperty)]

[-> (rdfs:subClassOf rdf:type owl:ObjectProperty)]

[-> (split:hasModulus rdf:type owl:DatatypeProperty)]

[-> (split:hasHash rdf:type owl:DatatypeProperty)]

# ---- schema entailments ----

[ (?D rdfs:subClassOf ?C) (?C rdfs:subClassOf ?B) ->
	(?D rdfs:subClassOf ?B)]
	 
[ (?C rdf:type owl:Class) ->
	(?C rdfs:subClassOf ?C)]
	
[ (?D rdfs:subClassOf ?C) notEqual(?D, ?C) -> 
	(?C rdf:type scaf:BaseClass)]

[ (?P rdf:type owl:DatatypeProperty) ->
	(?P rdf:type owl:Property)]

[ (?P rdf:type owl:ObjectProperty) ->
	(?P rdf:type owl:Property)]

[ (?R rdf:type owl:Restriction) (?R owl:cardinality ?n) ->
	(?R owl:minCardinality ?n) (?R owl:maxCardinality ?n) ]
	
# --- axioms for validation pass ---	
	
[ (?C rdf:type owl:Class) ->
	[(?C rdf:type owl:Class) <-]]

[ (?P rdf:type owl:Property) ->
	[(?P rdf:type owl:Property) <-]]
	
[ (?D rdfs:subClassOf ?C) ->	
	[(?D rdfs:subClassOf ?C) <-]]
	
[ (?C rdf:type scaf:BaseClass) -> 
	[ (?C rdf:type scaf:BaseClass) <-]]
		
[ (?C uml:hasStereotype uml:enumeration) (?i rdf:type ?C) ->
	[(?i rdf:type ?C) <-]]

# ---- validation rules ---- 

[-> [ problem( "Undefined class" ?C "for" ?x ) 
		<- (?x rdf:type ?C) notAny(?C rdf:type owl:Class)]]

[ (?C rdf:type scaf:BaseClass) -> 
	[ problem( "Abstract class" ?C "(and no concrete class) declared for" ?x ) 
		<- (?x rdf:type ?C)  all(?x rdf:type rdf:type scaf:BaseClass)]]

# (?C rdf:type owl:Class) (?D rdf:type owl:Class) notSame(?C ?D)
#[  ->
#	[ problem( "Conflicting class" ?C "is not base class of" ?D "declared for" ?x)
#		<- (?x rdf:type ?C) (?x rdf:type ?D) 
#			notSame(?C ?D) notAny(?D rdf:type scaf:BaseClass) notAny(?D rdfs:subClassOf ?C) ]]

[-> [ problem( "Undefined property" ?P "for" ?x ) 
		<- (?x ?P ?y) notAny(?P rdf:type owl:Property)]]
  
[ (?P rdf:type owl:FunctionalProperty) -> 
	[ problem( "Functional property" ?P "must have a single value. Subject" ?x "has" ?y1) 
		<- (?x ?P ?y1) (?x ?P ?y2) notSame(?y1 ?y2) ]]
 
#[ (?P rdf:type owl:DatatypeProperty) -> 
#	[ problem( "Singleton datatype property" ?P "must have a single value. Subject" ?x "has" ?y1) 
#		<- (?x ?P ?y1) (?x ?P ?y2) notSame(?y1 ?y2) ]]

[ (?P rdf:type owl:ObjectProperty) (?P rdfs:range ?C) ->  
 	[ problem( "Range of property" ?P "is" ?C "Subject" ?x "has" ?y) 
 		<- (?x ?P ?y)  notAny(?y rdf:type rdfs:subClassOf ?C) ]]
 
 [ (?P rdfs:domain ?C) -> 
 	[ problem( "Domain of property" ?P "is" ?C "Has subject" ?x) 
 		<- (?x ?P ?y)   notAny(?x rdf:type rdfs:subClassOf ?C) ]]

[ (?P rdf:type owl:DatatypeProperty) (?P rdfs:range ?C) ->  
 	[ problem( "Datatype property" ?P "is" ?C "Subject" ?x "has" ?y) 
 		<- (?x ?P ?y) notDatatype(?y ?C) ]]


[ (?R rdf:type owl:Restriction) (?C rdfs:subClassOf ?R) 
		(?R owl:onProperty ?P)  (?R owl:minCardinality 1) ->
	[problem( "Required property" ?P "in class" ?C "must be present for subject" ?x)
		<- (?x rdf:type ?C)  notAny(?x ?P ?y) ]] 

[ (?R rdf:type owl:Restriction) (?C rdfs:subClassOf ?R) 
		(?R owl:onProperty ?P)  (?R owl:maxCardinality 1) ->
	[ problem( "Singleton property" ?P "in class" ?C "must have one value. Subject" ?x "has" ?y1) 
		<- (?x rdf:type ?C) (?x ?P ?y1) (?x ?P ?y2) notSame(?y1 ?y2) ]]
 		