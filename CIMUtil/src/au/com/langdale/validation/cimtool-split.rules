@prefix scaf: <http://langdale.com.au/2007/rule-scafold#>.
@prefix uml: <http://langdale.com.au/2005/UML#>.
@prefix split: <http://langdale.com.au/2007/SplitModel#> .
@prefix md: <http://iec.ch/2010/schema/CIM_model_description#> .

# ---- schema entailments ----

[ (?D rdfs:subClassOf ?C) (?C rdfs:subClassOf ?B) ->
	(?D rdfs:subClassOf ?B)]
	 
[ (?C rdf:type owl:Class) ->
	(?C rdfs:subClassOf ?C)]
	
[ (?C rdf:type owl:Class) notAny(?C uml:hasStereotype uml:concrete) -> 
	(?C rdf:type scaf:BaseClass)]
	
 [ (?R rdf:type owl:Restriction) 
   (?R owl:allValuesFrom ?D) 
   (?R owl:onProperty ?P) 
   (?C rdfs:subClassOf ?R) ->
			(?C scaf:mayHaveProperty ?P)]	

[ (?P rdf:type owl:DatatypeProperty) ->
	(?P rdf:type rdf:Property)]

[ (?P rdf:type owl:ObjectProperty) ->
	(?P rdf:type rdf:Property)]

[ (?R rdf:type owl:Restriction) (?R owl:cardinality ?n) ->
	(?R owl:minCardinality ?n) (?R owl:maxCardinality ?n) ]
	
# --- axioms for validation pass copied from schema and its entailments ---	

[ (?C rdf:type owl:Class) ->
	[(?C rdf:type owl:Class) <-]]

[ (?P rdf:type rdf:Property) ->
	[(?P rdf:type rdf:Property) <-]]
	
[ (?D rdfs:subClassOf ?C) ->	
	[(?D rdfs:subClassOf ?C) <-]]

[ (?C rdf:type scaf:BaseClass) -> 
	[ (?C rdf:type scaf:BaseClass) <-]]

[ (?C scaf:mayHaveProperty ?P) -> 
	[ (?C scaf:mayHaveProperty ?P) <-]]
		
[ (?C uml:hasStereotype uml:enumeration) (?i rdf:type ?C) ->
	[(?i rdf:type ?C) <-]]

[ (?C uml:hasStereotype uml:concrete) -> 
	[(?C uml:hasStereotype uml:concrete) <-]]
	
# --- axioms for validation pass hard coded ---

[-> [(rdf:type rdf:type rdf:Property) <-]]

[-> [(split:hasHash rdf:type rdf:Property) <-]]

[-> [(split:hasModulus rdf:type rdf:Property) <-]]

[-> [(split:document rdf:type owl:Thing) <-]]

# --- axioms for (basic) header validation hard coded ---

[-> [(md:FullModel rdf:type owl:Class) <-]]

[-> [(md:Description rdf:type owl:Class) <-]]

[-> [(md:Description.name rdf:type rdf:Property) <-]]

[-> [(md:Description.uri rdf:type rdf:Property) <-]]

[-> [(md:Description.version rdf:type rdf:Property) <-]]

[-> [(md:Model.Creator rdf:type rdf:Property) <-]]

[-> [(md:Model.DependentOn rdf:type rdf:Property) <-]]

[-> [(md:Model.DependentOn rdfs:range owl:Thing) <-]]

[-> [(md:Model.ModelingAuthoritySet rdf:type rdf:Property) <-]]

[-> [(md:Model.Profile rdf:type rdf:Property) <-]]

[-> [(md:Model.Version rdf:type rdf:Property) <-]]

[-> [(md:Model.created rdf:type rdf:Property) <-]]

# ---- validation rules ---- 

[ -> [ problem( "Undefined property" ?P "for" ?x ) 
                <- (?x ?P *) notAxiom(?P rdf:type rdf:Property)]]

[ -> [ problem( "Untyped subject of" ?P "is" ?x ) 
		<- (?x ?P *) notAny(?x rdf:type *)]]

[ -> [ problem( "Untyped object of" ?P "is" ?y ) 
		<- (* ?P ?y) notLiteral(?y) notSame(?P rdf:type) notAxiom(?P rdfs:range owl:Thing) notAny(?y rdf:type *)]]

[ -> [ problem( "Undefined class" ?C "for" ?x ) 
		<- (?x rdf:type ?C) notAxiom(?C rdf:type owl:Class)]]

[ (?C rdf:type scaf:BaseClass) -> 
	[  problem( "Abstract class" ?C "used to declare" ?x) 
		<- (?x rdf:type ?C) ]]
  
[ (?P rdf:type owl:ObjectProperty) -> 
	[ problem( "Literal value for Object property" ?P "subject" ?x "value" ?y ) 
		<- (?x ?P ?y) literal(?y)]]
  
[ (?P rdf:type owl:FunctionalProperty) -> 
	[ problem( "Functional property" ?P "must have a single value. Subject" ?x "has more than one.") 
		<- (?x ?P *) countMoreThan(1 ?x ?P *)]]

[ (?P rdfs:range ?C) (?P rdf:type owl:ObjectProperty) ->  
 	[ problem( "Range of object property" ?P "is" ?C "Object" ?y "is a" ?Y) 
 		<- (* ?P ?y) (?y rdf:type ?Y) notAxiom(?Y rdfs:subClassOf ?C) ]]

[ (?P rdfs:range ?C) (?P rdf:type owl:DatatypeProperty) ->  
 	[ problem( "Range of datatype property" ?P "is" ?C "Subject" ?x "has" ?y) 
 		<- (?x ?P ?y) notDatatype(?y ?C) ]]
 
[ (?P rdfs:domain ?C) -> 
 	[ problem( "Domain of property" ?P "is" ?C "Subject" ?x "is a" ?X) 
 		<- (?x ?P *) (?x rdf:type ?X) notAxiom(?X rdfs:subClassOf ?C) ]]

[ (?R rdf:type owl:Restriction) 
		(?R owl:allValuesFrom ?C) 
		(?R owl:onProperty ?P) 
		(?P rdf:type owl:ObjectProperty) 
		(?A rdfs:subClassOf ?R) 
		->
	[ problem( "Range of object property" ?P "of" ?x "a" ?A "requires a" ?C "but have" ?y "which is a" ?Y) 
 		<- (?x rdf:type ?A) (?x ?P ?y) (?y rdf:type ?Y) notAxiom(?Y rdfs:subClassOf ?C) ]]

[ (?R rdf:type owl:Restriction) 
		(?R owl:allValuesFrom ?C) 
		(?R owl:onProperty ?P) 
		(?P rdf:type owl:DatatypeProperty) 
		(?A rdfs:subClassOf ?R) 
		->
	[ problem( "Range of datatype property" ?P "of" ?x "a" ?A "requires a" ?C "but have" ?y) 
 		<- (?x rdf:type ?A) (?x ?P ?y) notDatatype(?y ?C)]]

 [ (?P rdf:type rdf:Property) -> 
 	[ problem( "Domain of property" ?P "does not include" ?x "which is a" ?X) 
 		<- (?x ?P *) (?x rdf:type ?X) notAxiom(?X scaf:mayHaveProperty ?P) ]]

[ (?R rdf:type owl:Restriction) (?C rdfs:subClassOf ?R) 
		(?R owl:onProperty ?P)  (?R owl:minCardinality ?n) ->
	[problem( "Minimum cardinality of Property" ?P "in class" ?C "requires" ?n "value(s). Subject" ?x "has less.")
		<- (?x rdf:type ?C) countLessThan(?n ?x ?P *) ]] 

[ (?R rdf:type owl:Restriction) (?C rdfs:subClassOf ?R) 
		(?R owl:onProperty ?P)  (?R owl:maxCardinality ?n) ->
	[ problem( "Maximum cardinality of Property" ?P "in class" ?C "limit is" ?n "value(s). Subject" ?x "has more.") 
		<- (?x rdf:type ?C) countMoreThan(?n ?x ?P *) ]]

# --- electrical topology classes: enabled when Terminal is defined ---
# the topol: prefix is set to the namespace of Terminal.ConnectivityNode
# which is either the current standard cim namespace or a profile namespace 

[    (topol:Terminal.ConnectivityNode rdf:type rdf:Property) 
     (topol:Terminal.ConductingEquipment rdf:type rdf:Property) 
   -> 
	 (topol:Conductor rdfs:subClassOf scaf:Series) 
	 (topol:SeriesCompensator rdfs:subClassOf scaf:Series) 
	 (topol:Switch rdfs:subClassOf scaf:Series) 
	 (topol:RectifierInverter rdfs:subClassOf scaf:Series)
	 
	 (topol:Connector rdfs:subClassOf scaf:Shunt)
     (topol:EndCap rdfs:subClassOf scaf:Shunt)
     (topol:EnergyConsumer rdfs:subClassOf scaf:Shunt)
     (topol:EquivalentSource rdfs:subClassOf scaf:Shunt)
     (topol:Ground rdfs:subClassOf scaf:Shunt)
     (topol:RegulatingCondEq rdfs:subClassOf scaf:Shunt)
     (topol:TransformerWinding rdfs:subClassOf scaf:Shunt)
     [topolenabled: debug("enabled") <-]
]

# --- basic topology validation ---

[(?C rdfs:subClassOf scaf:Shunt) -> 
	[ problem("Extra terminals for" ?C "expect exactly one. Equipment" ?s "has more.") 
		<- (?s rdf:type ?C) countMoreThan(1 * topol:Terminal.ConductingEquipment ?s)]]

[(?C rdfs:subClassOf scaf:Shunt) -> 
	[ problem("Missing terminal for" ?C "expect exactly one. Equipment" ?s "has none.") 
		<- (?s rdf:type ?C) notAny(* topol:Terminal.ConductingEquipment ?s)]]
		
[(?C rdfs:subClassOf scaf:Series) -> 
	[ problem("Extra terminals for" ?C "expect exactly two. Equipment" ?s "has more.") 
		<- (?s rdf:type ?C) countMoreThan(2 * topol:Terminal.ConductingEquipment ?s)]]

[(?C rdfs:subClassOf scaf:Series) -> 
	[ problem("Missing terminal for" ?C "expect exactly two. Equipment" ?s "has less.") 
		<- (?s rdf:type ?C) countLessThan(2 * topol:Terminal.ConductingEquipment ?s)]]

[ -> [ problem("Isolated node" topol:ConnectivityNode "expect two or more terminals. Subject" ?n "has less.") 
		<- (?n rdf:type topol:ConnectivityNode) countLessThan(2 * topol:Terminal.ConnectivityNode ?n)]]

[ -> [ problem("Base voltages at" topol:ConnectivityNode "expected to agree. Node" ?n "has" ?v1 "and" ?v2) 
		<- (?n rdf:type topol:ConnectivityNode) 

		   (?t1 topol:Terminal.ConnectivityNode ?n)
		   (?t2 topol:Terminal.ConnectivityNode ?n)

			notSame(?t1 ?t2)

			(?t1 topol:Terminal.ConductingEquipment ?e1) 
			(?t2 topol:Terminal.ConductingEquipment ?e2)
			
			(?e1 topol:ConductingEquipment.BaseVoltage ?v1)			 
			(?e2 topol:ConductingEquipment.BaseVoltage ?v2)			 
			
			notSame(?v1 ?v2)
]]
		
[(?C rdfs:subClassOf scaf:Series) -> 
	[ problem("Loop created by" ?C "expect distinct nodes. Equipment" ?s "connects" ?n1 "to itself") 
		<- (?s rdf:type ?C) 
			(?t1 topol:Terminal.ConductingEquipment ?s) 
			(?t2 topol:Terminal.ConductingEquipment ?s) 
			notSame(?t1 ?t2)
			
			(?t1 topol:Terminal.ConnectivityNode ?n1)
			(?t2 topol:Terminal.ConnectivityNode ?n2)
			same(?n1 ?n2)
]]


 		